apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'

android {
	compileSdkVersion application.supportedSdk

	defaultConfig {
		minSdkVersion application.minSdk
	}

	buildFeatures {
		// Enables Jetpack Compose for this module
		compose true
	}
	composeOptions {
		kotlinCompilerExtensionVersion libraries.compose
	}
}

dependencies {
	implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$libraries.androidxLifecycle"
	implementation "androidx.lifecycle:lifecycle-livedata-core-ktx:$libraries.androidxLifecycle"
	implementation "androidx.fragment:fragment-ktx:$libraries.androidxFragment"

	//region compose
	implementation "androidx.compose.ui:ui:$libraries.compose"
	// Foundation (Border, Background, Box, Image, Scroll, shapes, animations, etc.)
	implementation "androidx.compose.foundation:foundation:$libraries.compose"
	// Material Design
	implementation "androidx.compose.material:material:$libraries.compose"
	// Integration with observables
	implementation "androidx.compose.runtime:runtime-livedata:$libraries.compose"
	//endregion

	//region coroutines
	implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$libraries.kotlinCoroutines"
	implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$libraries.kotlinCoroutines"
	testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$libraries.kotlinCoroutines"
	//endregion

	//dagger
	implementation "com.google.dagger:dagger:$libraries.dagger"
	kapt "com.google.dagger:dagger-compiler:$libraries.dagger"

	//modules
	implementation project(path: ':loan-api')

	testImplementation "junit:junit:$libraries.junit"
	testImplementation "org.mockito.kotlin:mockito-kotlin:$libraries.mockitoKotlin"
	testImplementation "androidx.arch.core:core-testing:$libraries.androidxCoreTesting"
}